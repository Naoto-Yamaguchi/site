<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nafoto'z_blog</title><link href="https://naoto-yamaguchi.github.io/site/" rel="alternate"></link><link href="https://naoto-yamaguchi.github.io/site/feeds/all.atom.xml" rel="self"></link><id>https://naoto-yamaguchi.github.io/site/</id><updated>2019-06-05T00:00:00+09:00</updated><entry><title>Dockerでgdb環境構築</title><link href="https://naoto-yamaguchi.github.io/site/docker_gdbenv.html" rel="alternate"></link><published>2019-06-05T00:00:00+09:00</published><updated>2019-06-05T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-06-05:/site/docker_gdbenv.html</id><summary type="html">&lt;p&gt;Dockerでgdb環境を構築した備忘録&lt;br&gt;&lt;img src="https://paper-attachments.dropbox.com/s_8FAC27AC251845FE76C63F0EAF156DF8B3F4D3C17D70B16D9D9AEE81A162B247_1559697621860_docker.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;h1&gt;動機対象&lt;/h1&gt;
&lt;p&gt;学校の課題で、dえC++と機械語の命令を比較しながら、メモリアクセスを少なくし、実行クロック数の少ない命令で目的の計算をすることでという速いアルゴリズムを設計できるようになろう！というものがありました。そこで、gdbデバッガで、機械語リストを出力させるということをやったのですが、Mac OS Sierraでは、gdbコード署名用の証明書の作成が必要とのことで、面倒そうでした。そこで、DockerでCentOSコンテナを立てて、gdb環境を整えることで、その代わりとすることにしました！&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;DockerでCentOSコンテナを立ち上げる&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/muniere/items/0569d05d470c5d3dc51b"&gt;CentOSにvimをインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/SOJO/items/9d6a65f3da941c49da36"&gt;こちら&lt;/a&gt;も参考になる&lt;/p&gt;
&lt;p&gt;この途中、&lt;code&gt;./configure&lt;/code&gt;のところで、
&lt;code&gt;configure: error: no acceptable C compiler found in $PATH&lt;/code&gt;
と出たが、これはgccがインストールされていなかったからだった。&lt;a href="https://qiita.com/tmak_tsukamoto/items/b1c1f04d2a2ac527887c"&gt;以下&lt;/a&gt;に記載の同様のエラーだったため、gccのインストールで解決&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.sioyaki.com/entry/2017/04/10/101610"&gt;g++をyumでインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gdb使ってみたら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) b main
Breakpoint 1 at 0x4007e8: file a.cpp, line 6.
(gdb) run
Starting program: /root/01/a.out
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000

Breakpoint 1, main () at a.cpp:6
6                cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; endl;
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.212.el6_10.3.x86_64 libgcc-4.4.7-23.el6.x86_64 libstdc++-4.4.7-23.el6.x86_64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となったので、
&lt;a href="https://corgi-lab.com/linux/debug-with-gdb/"&gt;debuginfoのinstall&lt;/a&gt;
&lt;a href="https://stackoverflow.com/questions/10389988/missing-separate-debuginfos-use-debuginfo-install-glibc-2-12-1-47-el6-2-9-i686"&gt;こちら&lt;/a&gt;も、Missing separate debuginfosについて&lt;/p&gt;
&lt;h1&gt;目次&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;DockerでCentOSコンテナを立ち上げる&lt;/li&gt;
&lt;li&gt;CentOSにgdbをインストール&lt;/li&gt;
&lt;li&gt;CentOSにvimをインストール&lt;/li&gt;
&lt;li&gt;CentOSにg++, debuginfoをインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;DockerでCentOSコンテナを立ち上げる&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;centosイメージのダウンロード&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull centos
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;コンテナの起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --cap-add=SYS_PTRACE --security-opt=&amp;quot;seccomp=unconfined&amp;quot; --name gdb centos:centos6.9 /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-dオプションをつけてバックグラウンドで起動しないとうまくいかなかったので注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起動しているコンテナの確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker ps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;停止しているものも確認したい場合は&lt;code&gt;-a&lt;/code&gt;をつける&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker exec -it gdb /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でbashを起動し、中に入れる&lt;/p&gt;
&lt;h1&gt;CentOSにgdbをインストール&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;gdbのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install gdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでできた！と思って、ファイルを作ってデバッグしてみようと思ったらvimがインストールされてなかった。&lt;/p&gt;
&lt;h1&gt;CentOSにvimをインストール&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;vimをインストールするのに必要なパッケージが入っているかを以下のコマンドで確認。"list installed"はインストール済みのパッケージ一覧を表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep mercurial
$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep ncurses-devel
$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep make         
$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep gcc 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;インストールされていない場合はそれぞれインストール。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install mercurial
$ yum install ncurses-devel
$ yum install make
$ yum install gcc
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;vimのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/src
$ sudo hg clone https://bitbucket.org/vim-mirror/vim vim
$ &lt;span class="nb"&gt;cd&lt;/span&gt; vim
$ ./configure --with-features&lt;span class="o"&gt;=&lt;/span&gt;huge --enable-multibyte --disable-selinux
$ make
$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;CentOSにg++, debuginfoをインストール&lt;/h1&gt;
&lt;p&gt;これで、vimが使えるので、C++ファイルの作成をしました。コンパイルしようとしたところ、g++をインストールしていないことに気がついたので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install gcc-c++
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストールし、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ g++ -g a.cpp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-gオプションをつけて、gdbデバック用にコンパイル。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb ./a.out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で実行して、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ b main
$ run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;したところ、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    (gdb) b main
    Breakpoint 1 at 0x4007e8: file a.cpp, line 6.
    (gdb) run
    Starting program: /root/01/a.out
    warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000

    Breakpoint 1, main () at a.cpp:6
    6                cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; endl;
    Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.212.el6_10.3.x86_64 libgcc-4.4.7-23.el6.x86_64 libstdc++-4.4.7-23.el6.x86_64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となったので、
debuginfoをインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install yum-utils
$ debuginfo-installglibc-2.12-1.212.el6_10.3.x86_64 libgcc-4.4.7-23.el6.x86_64 libstdc++-4.4.7-23.el6.x86_64 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで、gdbでデバッグできるようになりました！
参考にさせていただいた記事、ありがとうございます。&lt;/p&gt;
&lt;h1&gt;Dockerコンテナをcommitしてみる&lt;/h1&gt;
&lt;p&gt;gdbという名前のコンテナで動かしていたものを、gdbenvというイメージとして保存します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker commit gdb gdbenv
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
gdbenv              latest              c7e81afda91c        &lt;span class="m"&gt;22&lt;/span&gt; seconds ago      &lt;span class="m"&gt;1&lt;/span&gt;.34GB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で、&lt;code&gt;gdbenv&lt;/code&gt;という名前のイメージができていることを確認。
今後ここからイメージを起動して使うことができます。
Docker Hubにimageを公開すれば他の人も利用可能になります。公開にはDockerのアカウントを作成する必要があるみたいです。&lt;/p&gt;
&lt;h1&gt;commitしたimageからコンテナを利用→エラー&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;commitしたgdbenvというイメージから、gdbenvという名前のコンテナを起動して、bashを動かした。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --name gdbenv -it -d gdbenv /bin/bash
$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it gdbenv /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでgdbででバックしようとしたら、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) b main
Breakpoint 1 at 0x4007e8: file a.cpp, line 6.
(gdb) run
Starting program: /root/01/a.out
warning: Error disabling address space randomization: Operation not permitted
1
2
During startup program exited normally.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となったので、調べてみると、
gdbはシステムコールを使ってデバッグしているので、Dockerのコンテナを起動する際に、
* --cap-add=SYS_PTRACE: コンテナ内からのgdbによるptrace(2)を許可
* --security-opt="seccomp=unconfined": コンテナ内からのシステムコールの発行に制限を掛けない
の2つのオプションを追加する必要があるようです。（初めのCentOSのイメージからコンテナ起動するときに使ったコマンドと同じ。てっきり忘れていました。
&lt;a href="https://www.cyamax.com/entry/2018/02/09/070000"&gt;こちら&lt;/a&gt;を参考にさせていただきました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --cap-add&lt;span class="o"&gt;=&lt;/span&gt;SYS_PTRACE --security-opt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;seccomp=unconfined&amp;quot;&lt;/span&gt; --name gdbenv -it -d gdbenv /bin/bash
$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it gdbenv /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このようすることで、うまくできました。&lt;/p&gt;</content><category term="Docker"></category><category term="Programming"></category></entry><entry><title>細胞農業に興味がある理由(The reason why I'm interested in cellular agriculture)</title><link href="https://naoto-yamaguchi.github.io/site/cellular%20agriculture.html" rel="alternate"></link><published>2019-06-01T00:00:00+09:00</published><updated>2019-06-01T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-06-01:/site/cellular agriculture.html</id><summary type="html">&lt;p&gt;細胞農業について&lt;/p&gt;</summary><content type="html">&lt;h1&gt;動機、対象&lt;/h1&gt;
&lt;p&gt;自分の興味があるプロジェクトについて、英語で記述する機会がありました。
そこで他人に見せることを意識しながら、自分が興味ある学問分野について書いてみました。
全ての人&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h1&gt;目次&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;日本語&lt;ul&gt;
&lt;li&gt;&lt;a href="#what_is_ca_ja"&gt;細胞農業とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_ca_interests_me_ja"&gt;細胞農業に興味がある理由&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;きっかけ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Eglish&lt;ul&gt;
&lt;li&gt;What is cellular agriculture?&lt;/li&gt;
&lt;li&gt;The reason why I'm interested in cellular agriculture&lt;ul&gt;
&lt;li&gt;Solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=what_is_ca_ja&gt;&lt;/div&gt;

&lt;h2&gt;細胞農業とは&lt;/h2&gt;
&lt;p&gt;&lt;div id=why_ca_interests_me_ja&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;細胞農業に興味がある理由&lt;/h2&gt;
&lt;h3&gt;きっかけ&lt;/h3&gt;
&lt;p&gt;私がSustainabilityに興味を持ったきっかけは、農業に興味がある友達に勧められた、Cowspiracyというドキュメンタリーでした。このドキュメンタリーは、畜産業が持続可能ではないことを主張したものです。
国連が発表している人口統計によると、ほぼ確実に2050年には90億人を越えると言われており、これらの人を養う食糧生産方法の確立の必要性が声高に叫ばれています。中でも食肉の需要は高まる一方です。その一方で、現在の畜産業のあり方は持続可能ではなく、このままでは、将来の食料需要を満たすことはできません。従来の食肉生産方法では、牛肉1kgの生産に約10kgもの穀物を必要としており、エネルギー変換効率は悪く、生産に大量の飼料としての穀物と水や土地を必要とします。現状の畜産業の生産拡大には森林伐採等による土地の拡大を必要としますが、これには限りがあります。
そのドキュメンタリーを通して、畜産業が持続可能でないことを知りました。また、環境的な要因の他にも、家畜の扱い方等倫理的な側面での問題も指摘されています。&lt;/p&gt;
&lt;p&gt;現在、それらの食糧・環境・倫理問題の1つの解決策として細胞農業が注目されています。
自分は兼ねてから人類史にインパクトを与え、これまでの価値観を大きく変えるような取り組みに関わりたいと考えていましたが、自分が取り組むべきテーマはこれなのではないかと考えています。
自分の専門性を生かせて、持続可能な地球を実現するプロジェクトとして細胞農業に非常に興味があり、これにより持続可能性に取り組めるのではないかと考えています。
私は、地球の持続可能性に対する問題意識を人一倍持っており、sustainabilityに関するプロジェクトへの参加を強く希望します。&lt;/p&gt;
&lt;p&gt;The reason I am interested in sustainablility is because I watched the documentary, called "Cowspiracy", which a friend of mine who is interested in agriculture recommended me to watch. This movie persists that animal agriculture is not sustainable.
According to demographic by the United Nations, world population projected to reach 9.8 billion in 2050 and food production feeding increasing world population is required. Especially, global meat consumption continues to rise. However, animal agriculture now is not sustainable and cannot meet the needs of future demand for food because their energy conversion efficiency is so bad that they require a lot of crops, water and lands, which are limited on our earth.
Through the documentary, I understood that animal agriculture is not sustainable and there are other problems related to ethical issues.&lt;/p&gt;
&lt;p&gt;In order to solve these issues, cellular agriculture is recently gathering attention.
I have been hoping to get involved in the projects which have huge impact on human history and their way of thinking. I feel cellular agriculture is the subject that I need to pursue.
In this topic, I wiil be able to make use of my specializationn and tackle sustainability issues.
I have awareness of sustainability issues and strongly hope to join the projects about sustainability.&lt;/p&gt;
&lt;p&gt;現在の畜産業はsustainableではなく、&lt;/p&gt;
&lt;p&gt;The reason why I got interested in global health is that I read the book by Yuval Noah H, "Homo Deus".
In this book, "For thousand years, famine, plague, and war were always at the top of the human agenda, but in the last few decades, we have managed to rein in them. Of course, these problems have not yet completely solved, but they have been transformed from incomprehensible and uncontrollable forces of nature into manageable challenges."
While human have almost solved famine, for the first time in history, more people die today from eating too much than from eating too little. The most obvious examples of this are diabetes and obesity, which I think is a stupid situation.
Type 2 diabetes and obesity is sometimes due to genetic factor, but basically due to lifestyle. I guess the reformation of education and culture may be required to tackle lifestyle diseases. 
Especially, poor people in developed countries find it hard to avoid having fast food as daily consumption, which may lead to high diabetes rates. I think this is a big problem and that is the reason why I would like to address global health issues.&lt;/p&gt;
&lt;p&gt;global healthに興味がある理由
サピエンス全史という本を読んだことがきっかけです。
この本では人間は、この数千年で兼ねてから大きな問題であった、飢餓、疫病、戦争という人類の課題が解決されつつあることを示し、新たな課題へと目を向けさせています。
人類は、飢餓を解決してきた一方で、現代において飢餓で死ぬ人よりと食べ過ぎで死ぬ人の方が多い、という現状があります。このもっとも顕著な例が糖尿病と肥満ですが、
私はこれは明らかに馬鹿げた状況であると考えています。
糖尿病や肥満は、遺伝的な要因によることもありますが、基本的には生活習慣によるもので、治療法の開発はもちろんですが、根本的には、教育的、文化的側面から変えていかなくてはならないと考えています。
さらに、所得や地域によっては、糖尿病を誘発するような食生活を避けられない状態になっており、強い問題意識を感じています。特に先進国の貧困層などは、日常的な食事としてファストフードを避けることが金銭的に困難な状況になっており、この状況を社会システムや教育を変えることで、解決に導けるのではないかと考えています。&lt;/p&gt;
&lt;p&gt;特に&lt;/p&gt;
&lt;p&gt;また
ナウルの衝撃
間違った食生活が蔓延ることで、社会を壊す恐れがある。&lt;/p&gt;</content><category term="好きなもの"></category><category term="生物"></category><category term="細胞農業"></category></entry><entry><title>がん</title><link href="https://naoto-yamaguchi.github.io/site/cancer.html" rel="alternate"></link><published>2019-05-31T00:00:00+09:00</published><updated>2019-05-31T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-05-31:/site/cancer.html</id><summary type="html">&lt;p&gt;がんの仕組みの解説&lt;/p&gt;</summary><content type="html">&lt;h2&gt;最初の投稿です。&lt;/h2&gt;
&lt;p&gt;Hello &lt;strong&gt;world!&lt;/strong&gt;. My name is &lt;em&gt;SAIRA&lt;/em&gt; from Japan.&lt;/p&gt;
&lt;h3&gt;表を挿入&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;テスト 1&lt;/th&gt;
&lt;th&gt;テスト 2&lt;/th&gt;
&lt;th&gt;テスト 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;テスト&lt;/td&gt;
&lt;td&gt;テスト&lt;/td&gt;
&lt;td&gt;テスト&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;シンタックスハイライト&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;がん&lt;/h1&gt;
&lt;p&gt;がんは、細胞制御機構に異常が発生することでおこる病気です。現代では、5 人に 1 人ががんで命を失いますが、がんを研究で扱う理由は命を救うだけにとどまりません。がんの原因を調べることで、細胞制御機構の解明が進み、細胞生物学の基礎となるのです。我々多細胞生物の体の中では、数多くの細胞が協調して働くことで、多細胞としての個体が正常に生きることができます。しかし、この協調を乱すような細胞が生まれると、細胞社会の秩序を壊し、正常に生きることができなくなります。この協調を壊しうる細胞は、各細胞での塩基配列の変異により、毎日我々の体の中で生じていますが、それを修復する機構によって、秩序が保たれているのです。この修復する機構が壊れたり、変異が入った異常な細胞（秩序を満たす細胞）がとめどなく増殖できるようになると、我々の体の中の細胞社会の秩序を乱し、破壊に導いていくのです。&lt;/p&gt;
&lt;p&gt;ではどういう仕組みで、するのでしょうか？&lt;/p&gt;
&lt;h1&gt;動機対象&lt;/h1&gt;
&lt;p&gt;生物を学び始めた方で、がんについてよく知らないという人。
Cell 等を参考にしているので、分子細胞生物学的な観点からのがんの説明になります。がんの治療についての知識や、より大衆的な情報を求めている方は、参考に載せた、国立がん研究センター ガン情報サービス (2018)等をご確認下さい。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;cell chap20
国立がん研究センター ガン情報サービス (2018)
知っておきたいがんの基礎知識
https://ganjoho.jp/public/dia_tre/knowledge/basic.html&lt;/p&gt;
&lt;h1&gt;目次&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;がんとは？&lt;ul&gt;
&lt;li&gt;正常な状態の細胞の遺伝子に変異がおき、細胞制御機構に異常がある細胞ができる。&lt;/li&gt;
&lt;li&gt;異常な細胞が増殖する（がん化）&lt;/li&gt;
&lt;li&gt;異常な細胞が塊となって腫瘍を形成し、転移や浸潤によって体の他の部位に広がり、周りに迷惑をかける。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;がんの実際&lt;ul&gt;
&lt;li&gt;日本人は、一生のうち 2 人に 1 人はなると言われている身近な病気&lt;/li&gt;
&lt;li&gt;男性では、62%の確率で発症. がんで死亡する確率は 25%&lt;/li&gt;
&lt;li&gt;女性では、47%の確率で発症. がんで死亡する確率は 16%&lt;/li&gt;
&lt;li&gt;女性は、乳房、大腸、胃、子宮、肺の順に患者数が多い。&lt;/li&gt;
&lt;li&gt;男性は、前立腺、大腸、胃、肺、膀胱&lt;/li&gt;
&lt;li&gt;死亡率は、大腸、胃、肺の順に高い。&lt;/li&gt;
&lt;li&gt;昔は胃が多かったが、検診の増加で死亡率低下、大腸は食の欧米化で増加&lt;/li&gt;
&lt;li&gt;がんの 40%は予防できるが、完全に防ぐことはできない。禁煙やバランスのとれた食生活、適度な運動、予防治療で、がんが発症する確率を下げることはできる。&lt;/li&gt;
&lt;li&gt;遺伝子の変異が原因なのでうつらない&lt;/li&gt;
&lt;li&gt;一部のガンは、ウイルス感染が背景にあるが、それだけが原因ではない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;がんの種類&lt;ul&gt;
&lt;li&gt;良性と悪性&lt;/li&gt;
&lt;li&gt;名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;がんの原因&lt;ul&gt;
&lt;li&gt;分子的な&lt;/li&gt;
&lt;li&gt;生活習慣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cancer_treatment"&gt;がんの治療法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;標準治療&lt;/li&gt;
&lt;li&gt;外科手術&lt;/li&gt;
&lt;li&gt;薬物療法&lt;/li&gt;
&lt;li&gt;放射線療法&lt;/li&gt;
&lt;li&gt;免疫療法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情報源 - 公式サイトがんとは？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cell によると&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;がんとは、変異細胞クローンが周囲の細胞を犠牲にして増殖し、ついにはこのクローンが成長し進化し広がって細胞社会全体を破壊する病気である。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="https://paper-attachments.dropbox.com/s_B3B22EDC6578FBAF240D04242C36697E34E90BE462ACB6A923FB4B2FE05F2BDF_1558404445476_image.png"&gt;&lt;/p&gt;
&lt;p&gt;がん細胞は、子孫細胞に受け継がれる次の 2 つの性質によって定義されます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 　細胞の成長と分裂に関する制御を無視して増殖し、&lt;/p&gt;
&lt;p&gt;2 　他の細胞の領地に侵入して棲みつく。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特にこの 2 を、浸潤という。浸潤とは、束縛を逃れて血管やリンパ管に入り、体内の他の場所に転移(metastasis)して、二次腫瘍を形成することであり、がん細胞の本質的な特徴である。
2 の性質を持たない腫瘍は、良性(benign)腫瘍と呼ばれ、悪影響を及ぼすことはない。腫瘍を切除や破壊することで通常は完治する。
1 に加えて 2 んの性質を持った腫瘍が悪性(malignant)腫瘍であり、体内に浸潤して細胞組織を破壊する。がん患者の死因の大半は、浸潤（転移）したがん細胞である。また、良性腫瘍が変異によって悪性腫瘍になることもあるので注意が必要である。&lt;/p&gt;
&lt;h2&gt;がんの分類&lt;/h2&gt;
&lt;p&gt;がんは伝統的に、由来する組織や細胞の種類によって分類されます。ひらがなの「がん」は悪性腫瘍全体を示す時に用いられ、漢字の「癌」を用いる時は、上皮細胞から発生するがんに限定されます。&lt;/p&gt;
&lt;p&gt;発生部位によるがん（悪性腫瘍）の分類&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;癌（上皮腫, cancer, carcinoma）&lt;/li&gt;
&lt;li&gt;上皮を構成する細胞である上皮細胞から発生するがん&lt;/li&gt;
&lt;li&gt;がん症例の 80%は上皮腫。ガンの発生を助長する物理的・化学的損傷に最も頻繁に晒されるため&lt;/li&gt;
&lt;li&gt;例として、肺がん、乳がん、胃がん、大腸がん、子宮がん、卵巣がんなど&lt;/li&gt;
&lt;li&gt;cancer?&lt;/li&gt;
&lt;li&gt;肉腫&lt;/li&gt;
&lt;li&gt;結合組織や筋細胞などの非上皮細胞から生じる。&lt;/li&gt;
&lt;li&gt;代表的な肉腫には、骨肉腫、軟骨肉腫、横紋筋肉腫、平滑筋肉腫、線維肉腫、脂肪肉腫、血管肉腫があります。&lt;/li&gt;
&lt;li&gt;造血器から発生するがん&lt;/li&gt;
&lt;li&gt;血液をつくる臓器である骨髄やリンパ節を造血器といいます。造血器から発生するがんには、白血病(leukemia)、悪性リンパ腫(lymphoma)、骨髄腫等があります。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;がんの歴史的発見&lt;/h2&gt;
&lt;p&gt;ウイルス性家族性&lt;/p&gt;
&lt;p&gt;がん発生に関わる遺伝子&lt;/p&gt;
&lt;p&gt;&lt;a id="cancer_treatment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;がんの治療法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準治療&lt;/li&gt;
&lt;li&gt;外科手術&lt;/li&gt;
&lt;li&gt;薬物療法&lt;ul&gt;
&lt;li&gt;分子標的薬&lt;ul&gt;
&lt;li&gt;化合物でタンパク質に対して特異性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抗体医薬&lt;ul&gt;
&lt;li&gt;タンパク質のもつ抗体がくっついてタンパク質を分解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核酸医薬 (new!)&lt;ul&gt;
&lt;li&gt;核酸がmRNAに結合して、発現を抑制したり分解することで、病気の原因となるタンパク質を作らせないようにする。分子標的薬や抗体医薬は、タンパク質を分解するのに対して、核酸医薬は、mRNAの段階で分解したり翻訳を抑制するので、タンパク質になる前の段階で止めるイメージ。RNAなどの配列の特異性を生かすことで、より特異的に阻害できる薬を作れるのが、他にはない良い点。例えば、1塩基変異が原因の病気などに対する薬を作れる可能性がある。&lt;/li&gt;
&lt;li&gt;アンチセンスによるもの&lt;ul&gt;
&lt;li&gt;標的のmRNAのアンチセンス鎖をいれて、標的のmRNAにくっつき、タンパク質への翻訳を抑制する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプタマーによるもの&lt;ul&gt;
&lt;li&gt;標的のmRNAに結合する立体構造をもつRNAをいれて、タンパク質への翻訳を抑制する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;siRNAによるもの
    標的のmRNAを分解するsiRNAをいれて、mRNAを分解する。
    最近日本で承認されたものに、アミロイド蓄積遺伝子から発現したmRNAを分解する、siRNAによる薬がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;放射線療法&lt;/li&gt;
&lt;li&gt;免疫療法&lt;/li&gt;
&lt;/ul&gt;</content><category term="生物学"></category><category term="解説"></category><category term="授業まとめ"></category></entry><entry><title>エピジェネティクス</title><link href="https://naoto-yamaguchi.github.io/site/epigenetics.html" rel="alternate"></link><published>2019-05-31T00:00:00+09:00</published><updated>2019-05-31T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-05-31:/site/epigenetics.html</id><summary type="html">&lt;p&gt;エピジェネティクスの勉強&lt;/p&gt;</summary><content type="html">&lt;h1&gt;エピジェネティクス&lt;/h1&gt;
&lt;p&gt;エピジェネティクスとは？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DNAの配列に依存せず、かつ細胞分裂を経て引き継がれる遺伝子の機能の変化や仕組み及びその研究
のことを言います。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;エピトランスクリプトームは？
細胞分裂を経て引き継がれることはない？&lt;/p&gt;
&lt;p&gt;ではどういう仕組みで、するのでしょうか？&lt;/p&gt;
&lt;h1&gt;動機、対象&lt;/h1&gt;
&lt;p&gt;生物を学び始めた方で、がんについてよく知らないという人。
Cell 等を参考にしているので、分子細胞生物学的な観点からのがんの説明になります。がんの治療についての知識や、より大衆的な情報を求めている方は、参考に載せた、国立がん研究センター ガン情報サービス (2018)等をご確認下さい。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;cell chap20
国立がん研究センター ガン情報サービス (2018)
知っておきたいがんの基礎知識
https://ganjoho.jp/public/dia_tre/knowledge/basic.html&lt;/p&gt;
&lt;h1&gt;目次&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;エピジェネティクスとは？&lt;/li&gt;
&lt;li&gt;エピジェネティクス制御の分子機構&lt;ul&gt;
&lt;li&gt;クロマチン（ヒストン）修飾&lt;/li&gt;
&lt;li&gt;ゲノムDNAのメチル化&lt;/li&gt;
&lt;li&gt;機能性RNAによる制御&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;エピジェネティクスに関わる生命現象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cell によると&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;がんとは、変異細胞クローンが周囲の細胞を犠牲にして増殖し、ついにはこのクローンが成長し進化し広がって細胞社会全体を破壊する病気である。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="https://paper-attachments.dropbox.com/s_B3B22EDC6578FBAF240D04242C36697E34E90BE462ACB6A923FB4B2FE05F2BDF_1558404445476_image.png"&gt;&lt;/p&gt;
&lt;p&gt;がん細胞は、子孫細胞に受け継がれる次の 2 つの性質によって定義されます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 　細胞の成長と分裂に関する制御を無視して増殖し、&lt;/p&gt;
&lt;p&gt;2 　他の細胞の領地に侵入して棲みつく。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特にこの 2 を、浸潤という。浸潤とは、束縛を逃れて血管やリンパ管に入り、体内の他の場所に転移(metastasis)して、二次腫瘍を形成することであり、がん細胞の本質的な特徴である。
2 の性質を持たない腫瘍は、良性(benign)腫瘍と呼ばれ、悪影響を及ぼすことはない。腫瘍を切除や破壊することで通常は完治する。
1 に加えて 2 んの性質を持った腫瘍が悪性(malignant)腫瘍であり、体内に浸潤して細胞組織を破壊する。がん患者の死因の大半は、浸潤（転移）したがん細胞である。また、良性腫瘍が変異によって悪性腫瘍になることもあるので注意が必要である。&lt;/p&gt;
&lt;h2&gt;がんの分類&lt;/h2&gt;
&lt;p&gt;がんは伝統的に、由来する組織や細胞の種類によって分類されます。ひらがなの「がん」は悪性腫瘍全体を示す時に用いられ、漢字の「癌」を用いる時は、上皮細胞から発生するがんに限定されます。&lt;/p&gt;
&lt;p&gt;発生部位によるがん（悪性腫瘍）の分類&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;癌（上皮腫, cancer, carcinoma）&lt;/li&gt;
&lt;li&gt;上皮を構成する細胞である上皮細胞から発生するがん&lt;/li&gt;
&lt;li&gt;がん症例の 80%は上皮腫。ガンの発生を助長する物理的・化学的損傷に最も頻繁に晒されるため&lt;/li&gt;
&lt;li&gt;例として、肺がん、乳がん、胃がん、大腸がん、子宮がん、卵巣がんなど&lt;/li&gt;
&lt;li&gt;cancer?&lt;/li&gt;
&lt;li&gt;肉腫&lt;/li&gt;
&lt;li&gt;結合組織や筋細胞などの非上皮細胞から生じる。&lt;/li&gt;
&lt;li&gt;代表的な肉腫には、骨肉腫、軟骨肉腫、横紋筋肉腫、平滑筋肉腫、線維肉腫、脂肪肉腫、血管肉腫があります。&lt;/li&gt;
&lt;li&gt;造血器から発生するがん&lt;/li&gt;
&lt;li&gt;血液をつくる臓器である骨髄やリンパ節を造血器といいます。造血器から発生するがんには、白血病(leukemia)、悪性リンパ腫(lymphoma)、骨髄腫等があります。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;がんの歴史的発見&lt;/h2&gt;
&lt;p&gt;ウイルス性家族性&lt;/p&gt;
&lt;p&gt;がん発生に関わる遺伝子&lt;/p&gt;
&lt;p&gt;&lt;a id="cancer_treatment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;がんの治療法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準治療&lt;/li&gt;
&lt;li&gt;外科手術&lt;/li&gt;
&lt;li&gt;薬物療法&lt;ul&gt;
&lt;li&gt;分子標的薬&lt;ul&gt;
&lt;li&gt;化合物でタンパク質に対して特異性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抗体医薬&lt;ul&gt;
&lt;li&gt;タンパク質のもつ抗体がくっついてタンパク質を分解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核酸医薬 (new!)&lt;ul&gt;
&lt;li&gt;核酸がmRNAに結合して、発現を抑制したり分解することで、病気の原因となるタンパク質を作らせないようにする。分子標的薬や抗体医薬は、タンパク質を分解するのに対して、核酸医薬は、mRNAの段階で分解したり翻訳を抑制するので、タンパク質になる前の段階で止めるイメージ。RNAなどの配列の特異性を生かすことで、より特異的に阻害できる薬を作れるのが、他にはない良い点。例えば、1塩基変異が原因の病気などに対する薬を作れる可能性がある。&lt;/li&gt;
&lt;li&gt;アンチセンスによるもの&lt;ul&gt;
&lt;li&gt;標的のmRNAのアンチセンス鎖をいれて、標的のmRNAにくっつき、タンパク質への翻訳を抑制する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプタマーによるもの&lt;ul&gt;
&lt;li&gt;標的のmRNAに結合する立体構造をもつRNAをいれて、タンパク質への翻訳を抑制する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;siRNAによるもの
    標的のmRNAを分解するsiRNAをいれて、mRNAを分解する。
    最近日本で承認されたものに、アミロイド蓄積遺伝子から発現したmRNAを分解する、siRNAによる薬がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;放射線療法&lt;/li&gt;
&lt;li&gt;免疫療法&lt;/li&gt;
&lt;/ul&gt;</content><category term="生物学"></category><category term="解説"></category><category term="授業まとめ"></category></entry><entry><title>EC2からRDSへの接続と、RDSへのデータ投入&amp;日本語文字化け対応の備忘録</title><link href="https://naoto-yamaguchi.github.io/site/ec2_to_rds.html" rel="alternate"></link><published>2019-04-29T00:00:00+09:00</published><updated>2019-04-29T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-04-29:/site/ec2_to_rds.html</id><summary type="html">&lt;p&gt;RDS文字化け対応備忘録&lt;br&gt;&lt;img src="https://paper-attachments.dropbox.com/s_8FAC27AC251845FE76C63F0EAF156DF8B3F4D3C17D70B16D9D9AEE81A162B247_1559630545434_rds.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;p&gt;あるプロジェクトで、EC2インスタンスからRDSに接続できるように設定する必要がありました。また、RDSへのデータの投入も初めてだったので、記録を残しておこうと思いました。&lt;/p&gt;
&lt;h2&gt;EC2からRDSへの接続&lt;/h2&gt;
&lt;p&gt;EC2からRDSへ接続するには以下のことが必要です。
* EC2インスタンスに接続できる
* RDSインスタンスが管理下にある
* EC2インスタンスでmysqlコマンドを実行できる
* RDSインスタンスのマスターユーザー名とマスターパスワードを知っている。もしくは、AWSコンソールにログインできる
* RDSインスタンスのセキュリティグループで、MySQLポート(3306)を開放している（できる）&lt;/p&gt;
&lt;p&gt;ここでは、目的のEC2インスタンスとRDSインスタンスが作成してあることは前提とします。作成については他の記事を参照してください。&lt;/p&gt;
&lt;p&gt;EC2インスタンスからRDSインスタンスへは、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -h [ENDPOINT] -P 3306 -u [Username] –p [Name]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というコマンドで接続することができるのですが、そのためには以下の準備が必要です。
* mysqlコマンドが実行できる
* 今回のようにmysqlがEC2インスタンスにインストールされていない場合は、以下のようにしてインストールしました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストールできているかの確認は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;RDSインスタンスのエンドポイントがわかっている&lt;/li&gt;
&lt;li&gt;これはAWSコンソールから確認できます。&lt;/li&gt;
&lt;li&gt;[RDS]-&amp;gt;[データベース]-&amp;gt;インスタンスを選択-&amp;gt;[接続とセキュリティ]で確認できます。&lt;/li&gt;
&lt;li&gt;RDSインスタンスのマスターユーザー名がわかっている&lt;/li&gt;
&lt;li&gt;マスターユーザー名はRDSインスタンス作成時に指定するものです。&lt;/li&gt;
&lt;li&gt;[RDS]-&amp;gt;[データベース]-&amp;gt;インスタンスを選択-&amp;gt;[設定]で確認できます。&lt;/li&gt;
&lt;li&gt;RDSインスタンスのパスワードがわかっている&lt;/li&gt;
&lt;li&gt;パスワードはAWSコンソールから確認はできませんが、変更することはできます。&lt;/li&gt;
&lt;li&gt;[RDS]-&amp;gt;[データベース]-&amp;gt;インスタンスを選択-&amp;gt;[変更]で、設定という項目で、「新しいマスターパスワード」という欄があるので、そこで変更することができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上で、接続への必要な情報は揃うと思います。&lt;/p&gt;
&lt;p&gt;最後に、EC2インスタンスから、接続の要求をした際に、それを受け入れるための準備をRDS側でしておかないといけません（デフォルトでは許可されていません）。
[RDS]-&amp;gt;[データベース]-&amp;gt;インスタンスを選択-&amp;gt;[接続とセキュリティ]-&amp;gt;[セキュリティグループのルール]で設定されている、セキュリティグループのinboundでMySQLポート(3306)を開放しましょう。
以下の記事を参考になると思います。
&lt;a href="https://hacknote.jp/archives/39927/"&gt;RDSへEC2から接続する方法 -HACK NOTE&lt;/a&gt;
&lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/CHAP_GettingStarted.CreatingConnecting.MySQL.html"&gt;AWS RDS ドキュメント&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これで、上記のコマンドを実行することで無事接続できるはずです！&lt;/p&gt;
&lt;h2&gt;RDSへのデータ投入&lt;/h2&gt;
&lt;p&gt;ECSインスタンス上にあるデータをRDSのDBに投入する方法です。
以下の記事を参考にしました。
RDSインスタンスにログインした状態で、データベースを指定し(use database_name)、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LOAD DATA LOCAL INFILE &amp;#39;sample.csv&amp;#39;
REPLACE INTO TABLE database_name
CHARACTER SET utf8
FIELDS TERMINATED BY &amp;#39;,&amp;#39;
OPTIONALLY ENCLOSED BY &amp;#39;&amp;quot;&amp;#39;
IGNORE 1 LINES;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でEC2上にあるCSVファイルをインポートできます。
ファイル名の指定は、RDSインスタンスにログインする際にいたディレクトリからのパスになりますので、注意してください。またファイル名に日本語や、\などの文字が入っている場合も、上手くインポートできないことがあるので注意してください。&lt;/p&gt;
&lt;p&gt;さて、すでに作成していたテーブルに上記のコマンドでデータをインポートできたのですが、テーブルの中身を確認してみると、日本語が文字化けしてしまっていました。。。&lt;/p&gt;
&lt;h2&gt;日本語文字化けに対する対処&lt;/h2&gt;
&lt;p&gt;やるべきことは、
データベース、もしくはテーブルのキャラクターセットをutf8に変更することです。
&lt;a href="https://qiita.com/reoy/items/e355debf1e2b2abd703b"&gt;RDSで日本語が文字化けする問題&lt;/a&gt;という記事を参考に、AWSコンソールから、RDSインスタンスのパラメータグループを設定しました。
これだけ(Step4まで)では、すでに作成されているDBに対してパラメターグループの設定を行っても"character_set_database"は、latin1 のまま変更されないので、
&lt;a href="http://d.hatena.ne.jp/It_lives_vainly/touch/20160906/1473154857"&gt;RDS の mySQL で日本語が文字化けて困った時の対応方法&lt;/a&gt;を参考に、設定すると無事日本語文字化けが直りました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ALTER DATABASE database_name default character &lt;span class="nb"&gt;set&lt;/span&gt; utf8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドが重要です。&lt;/p&gt;
&lt;p&gt;今後、RDSインスタンス新規作成の際に、パラメータグループをきちんと設定すると良さそうです。&lt;/p&gt;
&lt;p&gt;どうでも良いですが、mysqlのテーブル名は最長で63文字らしいです。&lt;/p&gt;</content><category term="AWS"></category></entry><entry><title>チューリングパターンとは</title><link href="https://naoto-yamaguchi.github.io/site/turing_pattern.html" rel="alternate"></link><published>2019-04-04T00:00:00+09:00</published><updated>2019-04-04T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-04-04:/site/turing_pattern.html</id><summary type="html">&lt;p&gt;チューリングパターンの解説&lt;br&gt;&lt;img src="https://camo.qiitausercontent.com/58b0457b75d51790ad0c73dc752d27a2434d6a97/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3134313530332f35636465656163632d366132362d343566612d636264332d3539316561316264373238612e6a706567"&gt;&lt;/img&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;動機&lt;/h2&gt;
&lt;p&gt;システム生物学の授業が書くことになったきっかけです。
&lt;a href="https://nafoto-z.hatenablog.com/entry/2018/12/07/184450"&gt;hatenablog&lt;/a&gt; に書いたところ数式を上手く表示できず書き途中であったため、こちらで書きました。&lt;a href="https://nafoto-z.hatenablog.com/entry/2018/12/07/184450"&gt;hatenablog&lt;/a&gt; の方に、意外とアクセスがあったので、折角訪問してくださった方にちゃんと見ていただきたいと思いました。&lt;a href="https://nafoto-z.hatenablog.com/entry/2018/12/07/184450"&gt;hatenablog&lt;/a&gt; の方は放置していてひどいです。こちらのサイトも見た目等変なところが多いですがご容赦下さい。そのうち直します。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;実装は、以下のサイトを参考にしました https://ipython-books.github.io/124-simulating-a-partial-differential-equation-reaction-diffusion-systems-and-turing-patterns/&lt;/p&gt;
&lt;h2&gt;チューリングパターンとは？&lt;/h2&gt;
&lt;p&gt;誤解を恐れずに言えば、こういう模様(=波)のことです。
&lt;img alt="" src="https://paper-attachments.dropbox.com/s_FC172B40024B510FC7C44978CC0D4E41A14218694B499746443C68DDD9C8FBD5_1559322871809_pattern.png"&gt;&lt;/p&gt;
&lt;p&gt;こういう模様、パターンのことをチューリングパターンと言います。チューリング波、反応拡散波という言い方もあります。&lt;/p&gt;
&lt;p&gt;そして重要なのは、以下の 2 点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;このパターンはある条件を満たす化学反応システムが自発的に生み出す周期的なものであるということ&lt;/li&gt;
&lt;li&gt;模様(=波)の仕組みは、反応拡散方程式で数学的に表せる！！ ということ&lt;/li&gt;
&lt;li&gt;この模様は、生物によく見られるものであり、一部の生物では、確かに反応拡散系によってこの模様が作られている！！ ということ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;遺伝子だけで決まる訳ではない&lt;/p&gt;
&lt;h2&gt;point①&amp;amp;③&lt;/h2&gt;
&lt;p&gt;これは化学反応によって自発的に起こるパターンで、生物にも見られる！！
※ 画像はイメージです。&lt;br&gt;
こちらからお借りしました。&lt;a href="https://qiita.com/kanaya-tamihiro/items/a735c6f4ee8e914c5fc1"&gt;チューリング波（反応拡散波）を理解したい&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実際の生き物に見られる模様のパターン&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="" src="https://camo.qiitausercontent.com/1a3cfcbed9f5b9bc17f758fdae845504c6c5928a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3134313530332f66393132613633342d626366372d613566332d336638362d3534623337306238363565392e6a706567"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="https://camo.qiitausercontent.com/f88df298db147f7519209a0f4655e2c394396ddf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3134313530332f36326262353162312d306265302d353530632d616236352d3563666139643031316535372e6a706567"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="" src="https://camo.qiitausercontent.com/58b0457b75d51790ad0c73dc752d27a2434d6a97/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3134313530332f35636465656163632d366132362d343566612d636264332d3539316561316264373238612e6a706567"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="https://camo.qiitausercontent.com/87cd36dbb384891ce7aec5d6cabdb233c017a02c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3134313530332f39343164613733622d646230382d313230332d346339362d3737373736336661326165362e6a706567"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ことの始まりは、イギリスの数学者アランチューリングが 1952 年に発表した論文で、「生物の模様は波によって作られる」という仮説。です&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生物の体の表面では化学反応が起きており、反応を活性化する因子と抑制する因子の広がる速さが異なることで「波」が生じ、模様が作られる&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;https://www.jst.go.jp/pr/jst-news/pdf/2015/2015_04_p08.pdf
という考え方。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1952 年に、イギリスの代表的な数学者でコンピュータ科学の生みの親でもあるアラン・チューリングが、「2 つの仮想的な化学物質が、ある条件を満たして互いの合成をコントロールしあうとき、その物質の濃度分布は均一にならず、濃い部分と薄い部分が、空間に繰り返しパターン（反応拡散波）を作って安定する」ことを、数学的に証明した。1970 年代に数人の数学者がチューリングの方程式を 2 次元でシミュレーションしたところ（チューリングの時代はコンピュータがなかった）、方程式の定数（仮想的な化学物質の性質）を少し変えるだけで、シマウマのストライプ模様もキリンの網目模様も、豹の斑点模様も作り出せることを発見した。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;https://www.brh.co.jp/seimeishi/journal/011/to_1.html
天才か...&lt;/p&gt;
&lt;p&gt;簡単に例えてみると...
2 つの赤い物質(A)と青い物質(B)があって、この 2 つの関係が、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;赤い物質が増えると、自分(赤い物質)をより増やすようになる（=赤が自分を「促進」）&lt;/li&gt;
&lt;li&gt;赤い物質が増えると、青い物質を増やすようになる(=赤が青を「促進」)&lt;/li&gt;
&lt;li&gt;逆に青い物質が増えると、赤い物質を減らすようになる(=青が赤を「抑制」)
 &lt;img alt="" src="https://paper-attachments.dropbox.com/s_FC172B40024B510FC7C44978CC0D4E41A14218694B499746443C68DDD9C8FBD5_1559323168009_spread.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ような関係で、
4. 赤い物質より青い物質の方が周りに広がりやすい
&lt;img alt="" src="https://paper-attachments.dropbox.com/s_FC172B40024B510FC7C44978CC0D4E41A14218694B499746443C68DDD9C8FBD5_1559323178474_reaction.png"&gt;&lt;/p&gt;
&lt;p&gt;とき、ランダムに赤青がある状態からスタートして、ある程度時間が経つと、安定した赤青模様のパターンができる！ということである。
&lt;img alt="" src="https://paper-attachments.dropbox.com/s_FC172B40024B510FC7C44978CC0D4E41A14218694B499746443C68DDD9C8FBD5_1559323190004_pattern.png"&gt;&lt;/p&gt;
&lt;p&gt;上記のように初期状態やパラメーターによって色々な模様ができます。&lt;/p&gt;
&lt;p&gt;白黒でも良いですが、画像に合わせて赤青にしました。&lt;/p&gt;
&lt;p&gt;この関係は、食物連鎖の一部に例えてみるとわかりやすいでしょう全然現実世界に沿っていないとは思いますが...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ネズミが増えるとネズミたちは、協力して生活するようになり、どんどんその数を増やしていきます(ネズミが自分たちの増加を「促進」)&lt;/li&gt;
&lt;li&gt;ネズミが増えると、ネズミを食べる猫たちは沢山食料を得られるので、猫たちの数も増えていきます(ネズミが猫の増加を「促進」) 3.　猫が増えると、ネズミは今まで以上に食べられてしまうので、数を減らしてしまいます。(猫の増加がネズミの増加を「抑制」)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このような関係のイメージです。&lt;/p&gt;
&lt;h2&gt;ポイント 2 ~模様の仕組みは数学的に表せる！~&lt;/h2&gt;
&lt;p&gt;この 1~4 の関係を数学的に表すと、一例として、&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial t} = 0.6p - q - p^3 + 0.0002\Delta u$$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial v}{\partial t} = 1.5p - 2q + 0.01\Delta u$$&lt;/div&gt;
&lt;p&gt;と表すことができます。これは反応拡散方程式と言われるものです。式の意味は後ほど説明します。&lt;/p&gt;
&lt;h2&gt;反応拡散方程式とは？？&lt;/h2&gt;
&lt;p&gt;位置付けとしては、今回の式は、2 変数の反応拡散方程式&lt;/p&gt;
&lt;p&gt;反応拡散方程式 : &lt;/p&gt;
&lt;div class="math"&gt;$$ ∂u/∂t = F(u) + D∂^2u/∂x^2 $$&lt;/div&gt;
&lt;p&gt;反応方程式 : &lt;/p&gt;
&lt;div class="math"&gt;$$ ∂u/∂t = F(u)$$&lt;/div&gt;
&lt;p&gt;拡散方程式 : &lt;/p&gt;
&lt;div class="math"&gt;$$ ∂u/∂t = D∂^2u/∂x^2 (D は拡散係数)$$&lt;/div&gt;
&lt;p&gt;1 つめは反応項、2 つめを拡散項と呼ぶことにします。
F(u)は 2 物質の化学反応による物質の濃度の変化を表す式が入ります。例えば、酵素の反応速度を表すミカエリス・メンテンの式などが入ることもあるでしょう。&lt;/p&gt;
&lt;p&gt;拡散項は、2 物質が空間を広がっていくことを考えるときに使います。&lt;/p&gt;
&lt;p&gt;2 つの化学物質 u と v があって、その二つの濃度が以下のような数式（反応拡散方程式）で表わされるとき、u と v の濃い部分と薄い部分がいい感じに模様のパターンを作って安定化するということである。&lt;/p&gt;
&lt;h2&gt;キリンやシマウマは違うっぽい&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;バーゼル市の動物園へ行って、シマウマやキリンの模様を詳しく観察してみた。すると、それらは反応拡散波そのものではないことに気がついた。反応拡散波は、化学反応が作り出す定常波であるから、その波長（模様の間隔）は、一定に保たれなければならない。しかし、シマウマやキリンの模様は皮膚に固定されているらしく、体が大きくなるにつれて模様の間隔が広がっていってしまう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近藤先生が、実験で証明したのは、タテジマについてです。シマウマやキリンについてはわかりません。近藤先生の物語はこちら
https://www.terumozaidan.or.jp/labo/technology/15/index.html
生物が模様を作る仕組みを 25 年かけて明らかにした。それを我々は学ぶことができている。感謝&lt;/p&gt;
&lt;p&gt;反応拡散系(=反応系 + 拡散系)
化学反応と分子の拡散を組み合わせた反応システムのこと。&lt;/p&gt;
&lt;p&gt;http://www.fbs.osaka-u.ac.jp/labs/skondo/ozaki/what%20is%20RD%202(outline).htm&lt;/p&gt;
&lt;h3&gt;チューリングマシンとは？（ついでに）&lt;/h3&gt;
&lt;p&gt;todo
情報科学の勉強しましょう。形式言語理論を学ぶとわかります。&lt;/p&gt;
&lt;h3&gt;というかアラン・チューリングって誰だよ？&lt;/h3&gt;
&lt;p&gt;めっちゃすごい人。計算機科学の父。映画、「イミテーションゲーム」はおすすめです。&lt;/p&gt;
&lt;h3&gt;セルオートマトン、ライフゲームって何？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;チューリングは原論文（The Chemical Basis of Morphogenesis）の中で、反応拡散波が皮膚の模様形式だけでなく、「形態形成全般にはたらく基本的なメカニズム」であろうと述べている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;つまり骨格なども形成しているのではという考え方もあるようです。&lt;/p&gt;
&lt;h2&gt;反応拡散方程式の導出(2 変数、1 次元)&lt;/h2&gt;
&lt;p&gt;三浦岳、発生の数理を参考&lt;/p&gt;
&lt;h3&gt;考える系について&lt;/h3&gt;
&lt;p&gt;まずは一次元の棒状の組織を考えてから二次元に拡張する。横の長さ 1, 縦の長さ&lt;/p&gt;
&lt;div class="math"&gt;$$ dy $$&lt;/div&gt;
&lt;p&gt;として、&lt;/p&gt;
&lt;div class="math"&gt;$$ dy &amp;lt;&amp;lt; 1 $$&lt;/div&gt;
&lt;p&gt;で縦方向の分布は無視する。この棒状の組織の中の細胞が 2 種類の分子、活性因子(activator)と抑制因子(inhibitor)を産生し、これらの分子が細胞の分子の産生、分解をコントロールしつつ、近傍の細胞に拡散している、という状態を考える。&lt;/p&gt;
&lt;h3&gt;離散化&lt;/h3&gt;
&lt;p&gt;このままでは空間的な分布の状態を考えるのは難しいので、この細長い棒を横方向に&lt;/p&gt;
&lt;div class="math"&gt;$$ dx $$&lt;/div&gt;
&lt;p&gt;ずつ区切って、&lt;/p&gt;
&lt;div class="math"&gt;$$ 1/ dx $$&lt;/div&gt;
&lt;p&gt;個の小さな組織片に分けて考える。(&lt;/p&gt;
&lt;div class="math"&gt;$$ dx &amp;lt;&amp;lt; 1 $$&lt;/div&gt;
&lt;p&gt;)
各組織片内での活性因子、抑制因子の分布はほぼ一様であるとして、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;組織片の中での活性因子、抑制因子の相互作用&lt;/li&gt;
&lt;li&gt;ある組織片と、両隣りの組織片との間での活性因子、抑制因子のやりとり&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の 2 つの要素を考え、時間変化をみる。時間は連続的なものだが、便宜上、微小区間&lt;/p&gt;
&lt;div class="math"&gt;$$ dt $$&lt;/div&gt;
&lt;p&gt;に区切って考える。時刻&lt;/p&gt;
&lt;div class="math"&gt;$$ m \* dt $$&lt;/div&gt;
&lt;p&gt;(&lt;/p&gt;
&lt;div class="math"&gt;$$m$$&lt;/div&gt;
&lt;p&gt;は整数)に置ける、それぞれの組織片の中の活性因子、抑制因子の濃度について、左から数えて n 個目の組織片の中の活性化因子の濃度を&lt;/p&gt;
&lt;div class="math"&gt;$$ p(n,m) $$&lt;/div&gt;
&lt;p&gt;、抑制因子の濃度を&lt;/p&gt;
&lt;div class="math"&gt;$$ q(n, m) $$&lt;/div&gt;
&lt;p&gt;とする。&lt;/p&gt;
&lt;h3&gt;反応項&lt;/h3&gt;
&lt;p&gt;反応項は 2 種類の分子の相互作用によって決まり、様々なパターンがある。今回は一例として、チューリングパターン形成に置ける反応項を考える。今回考えている、チューリングパターンを生成する反応拡散系における反応系では、上で述べたように、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活性化因子は、自身の産生を促進&lt;/li&gt;
&lt;li&gt;活性化因子は、抑制因子の産生を促進&lt;/li&gt;
&lt;li&gt;抑制因子は、活性因子の産生を抑制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という相互作用をしていると考える。
&lt;img src="/img/reaction.png" width="300" height="200"&gt;&lt;/p&gt;
&lt;p&gt;これを数式で表すと、
&lt;/p&gt;
&lt;div class="math"&gt;$$ f(p, q) $$&lt;/div&gt;
&lt;p&gt;, &lt;/p&gt;
&lt;div class="math"&gt;$$ g(p, q) $$&lt;/div&gt;
&lt;p&gt; を活性因子、抑制因子の濃度の変化率として、&lt;/p&gt;
&lt;div class="math"&gt;$$ f(p, q) = ap - bq (a, b は正の定数)$$&lt;/div&gt;
&lt;div class="math"&gt;$$　 g(p, q) = cp -dq (c, d は正の定数)$$&lt;/div&gt;
&lt;p&gt;変化量を考えると
&lt;/p&gt;
&lt;div class="math"&gt;$$ f(p(n, m), q(n, m)) \times dt $$&lt;/div&gt;
&lt;div class="math"&gt;$$ g(p(n, m), q(n, m)) \times dt $$&lt;/div&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;p&gt;今回の例では、2 種類の物質で考えたが、他にも 1 種類、3 種類での反応系を考えることができて、それらの相互作用(促進か、抑制か)に応じて、様々なダイナミクスが生じる。具体例としては、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遺伝子発現、解糖系振動、概日時計、細胞周期などにみられるダイナミクスなどがあげられる。ここを参考にした
  http://www.fbs.osaka-u.ac.jp/labs/skondo/ozaki/what%20is%20RD%202(outline).htm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活性因子は、ある程度以上の濃度になると産生が抑えられる(-p3)
  ∂u/∂t の反応項 =
  ∂v/∂t の反応項&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;拡散項&lt;/h3&gt;
&lt;p&gt;次に、隣の組織片との間の相互作用を考え、拡散における濃度変化を考える。
&lt;/p&gt;
&lt;div class="math"&gt;$$n$$&lt;/div&gt;
&lt;p&gt;番目の組織片の活性化因子の濃度を&lt;/p&gt;
&lt;div class="math"&gt;$$p(n, m)$$&lt;/div&gt;
&lt;p&gt;とすると、右隣の組織片の活性因子の濃度は、&lt;/p&gt;
&lt;div class="math"&gt;$$p(n+1, m)$$&lt;/div&gt;
&lt;p&gt;となる。単純な拡散の場合、物質の移動量は濃度勾配と境界の長さに比例する(Fick の法則)ので、微小時間 dt の間に右隣の組織へと移動していく活性化因子の量は、&lt;/p&gt;
&lt;div class="math"&gt;$$ d_p(p(n+1, m) - p(n, m)) / dx \times dy \times dt $$&lt;/div&gt;
&lt;p&gt;で表される。&lt;/p&gt;
&lt;div class="math"&gt;$$d_p$$&lt;/div&gt;
&lt;p&gt;は活性化因子の拡散係数である。これによる&lt;/p&gt;
&lt;div class="math"&gt;$$n$$&lt;/div&gt;
&lt;p&gt;番目の組織片の濃度変化は、この量を組織片の面積で割って、&lt;/p&gt;
&lt;div class="math"&gt;$$ d_p(p(n+1, m) - p(n, m)) / dx^2 \times dt $$&lt;/div&gt;
&lt;p&gt;となる。同様に左隣の物質とのやりとりを考えると、左右合わせて、&lt;/p&gt;
&lt;div class="math"&gt;$$n$$&lt;/div&gt;
&lt;p&gt;番目の組織片の濃度変化は、&lt;/p&gt;
&lt;div class="math"&gt;$$ d_p(p(n+1, m) + p(n, m) - 2 \times p(n, m)) / dx^2 \times dt $$&lt;/div&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;p&gt;同様に抑制因子の濃度変化は、&lt;/p&gt;
&lt;div class="math"&gt;$$ d_q(q(n+1, m) + q(n, m) - 2 \times q(n, m)) / dx^2 \times dt (d_q は抑制因子の拡散係数)$$&lt;/div&gt;
&lt;p&gt;これが拡散項となる&lt;/p&gt;
&lt;h3&gt;反応拡散方程式&lt;/h3&gt;
&lt;p&gt;領域が十分広いという境界条件のもとで、&lt;/p&gt;
&lt;div class="math"&gt;$$dt, dx$$&lt;/div&gt;
&lt;p&gt;を無限に 0 に近づけると、離散ではない連続の方程式を得ることができる。連続関数として、時刻&lt;/p&gt;
&lt;div class="math"&gt;$$t$$&lt;/div&gt;
&lt;p&gt;における位置&lt;/p&gt;
&lt;div class="math"&gt;$$x$$&lt;/div&gt;
&lt;p&gt;の活性因子、抑制因子の濃度をそれぞれ&lt;/p&gt;
&lt;div class="math"&gt;$$u(x, t), v(x, t)$$&lt;/div&gt;
&lt;p&gt;とし、&lt;/p&gt;
&lt;div class="math"&gt;$$dt, dx$$&lt;/div&gt;
&lt;p&gt;を無限に 0 に近づけると、&lt;/p&gt;
&lt;div class="math"&gt;$$ ∂u(x, t) / ∂t = f(u(x, t), v(x, t)) + d_p∂^2u(x, t) / ∂x^2$$&lt;/div&gt;
&lt;div class="math"&gt;$$ ∂v(x, t) / ∂t = g(u(x, t), v(x, t)) + d_q∂^2u(x, t) / ∂x^2$$&lt;/div&gt;
&lt;p&gt;とそれぞれの濃度変化を表すことができる。それぞれ第一項が反応項であり、第二項が拡散項である。これは一般の反応拡散方程式の表記&lt;/p&gt;
&lt;h2&gt;2 次元チューリングパターンの実装&lt;/h2&gt;
&lt;p&gt;ここでは、反応項として、&lt;/p&gt;
&lt;div class="math"&gt;$$f(p, q) = 0.6p - q - p^3 $$&lt;/div&gt;
&lt;div class="math"&gt;$$ g(p, q) = 1.5p - 2q $$&lt;/div&gt;
&lt;p&gt;を考える。(ちなみにこれは神経細胞の発火モデルである、FitzHugh-南雲モデルと類似している)&lt;br&gt;
これは、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;活性因子が、自らの産生を促進する&lt;div class="math"&gt;$$(0.6p)$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;活性因子は、抑制因子の産生を促進する&lt;div class="math"&gt;$$(1.5p)$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;活性因子は、ある程度以上の濃度になると産生が抑えられる&lt;div class="math"&gt;$$(-p^3)$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;抑制因子は、活性因子の産生を抑制する&lt;div class="math"&gt;$$(-q)$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;抑制因子は、何もないと減衰していく&lt;div class="math"&gt;$$(-2q)$$&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という 5 つの条件を備えている。&lt;/p&gt;
&lt;p&gt;拡散項については、
&lt;/p&gt;
&lt;div class="math"&gt;$$ d_p = 0.0002 , d_q = 0.01$$&lt;/div&gt;
&lt;p&gt; とおく。&lt;br&gt;
&lt;/p&gt;
&lt;div class="math"&gt;$$ d_q $$&lt;/div&gt;
&lt;p&gt;の方が&lt;/p&gt;
&lt;div class="math"&gt;$$ d_p $$&lt;/div&gt;
&lt;p&gt;よりも大きい値でないと、安定なパターンが形成されないことがわかっている。意味合いとしては、物質&lt;/p&gt;
&lt;div class="math"&gt;$$v$$&lt;/div&gt;
&lt;p&gt;の方がより拡散しやすいということである。&lt;/p&gt;
&lt;p&gt;濃度変化は以下のように表せる。&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial t} = 0.6p - q - p^3 + 0.0002\Delta u$$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial v}{\partial t} = 1.5p - 2q + 0.01\Delta u$$&lt;/div&gt;
&lt;p&gt;これを元にして、2 次元でのパターン形成の様子を描画してみる。&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial t} = f(u, v) + d_p\frac{\partial^2 u(x, t)}{\partial^2 x}$$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial t} = f(u, v) + d_p\Delta u$$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial v}{\partial t} = g(u, v) + d_q\frac{\partial^2 v(x, t)}{\partial^2 x}$$&lt;/div&gt;
&lt;div class="math"&gt;$$ ∂v(x, t) / ∂t = g(u(x, t), v(x, t)) + d_q∂^2u(x, t) / ∂x^2$$&lt;/div&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;h4&gt;1. パッケージのインストール&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2. チューリングパターンのシミュレーションに、以下の偏微分方程式を用いる。範囲は-1~1&lt;/h4&gt;
&lt;div class="math"&gt;$$ ∂u / ∂t = aΔu + u - u^3 - v + k $$&lt;/div&gt;
&lt;div class="math"&gt;$$ τ ∂v/∂t = bΔv + u -v $$&lt;/div&gt;
&lt;p&gt;u は色素？濃度を表す。v もその濃度。v は u は抑制する。u は v を促進する。初期条件では、u,v は互いに独立したランダムな値とする。
Neumann 境界条件&lt;/p&gt;
&lt;h4&gt;3. 以下のパラメータを定める&lt;/h4&gt;
&lt;p&gt;a = 2.0e-4
b = 1e-2
tau = 1
k = 0&lt;/p&gt;
&lt;h4&gt;4. 時間と空間を離散化して範囲に分ける。&lt;/h4&gt;
&lt;p&gt;size = 100
dx = 2. / size
T = 54.0
dt = .001
n = int(T / dt&lt;/p&gt;
&lt;h4&gt;5. u と v を初期化。&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;laplacian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Ztop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;Zleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;Zbottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;Zright&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;Zcenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ztop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Zleft&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Zbottom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Zright&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Zcenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;7.行列を表示する関数を定義&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interpolation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bilinear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_axis_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;laplacian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Ztop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;Zleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;Zbottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;Zright&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;Zcenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ztop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Zleft&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Zbottom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Zright&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Zcenter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;step_plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="c1"&gt;# 偏微分方程式を有限微小変化methodでシミュレーション&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# uとvのラプラシアンを計算&lt;/span&gt;
        &lt;span class="n"&gt;deltaU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;laplacian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;deltaV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;laplacian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# uとvの値をグリッドの中でとる&lt;/span&gt;
        &lt;span class="n"&gt;Uc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;Vc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# 値を更新する&lt;/span&gt;
        &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
            &lt;span class="n"&gt;Uc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;deltaU&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Uc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Uc&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Vc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; \
            &lt;span class="n"&gt;Vc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;deltaV&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Uc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Vc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt;
        &lt;span class="c1"&gt;# Neumann条件: 端の微分は0?&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# 9つの異なる時間に状況を分けてプロット&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;step_plot&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;step_plot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;step_plot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;show_patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$t={i*dt:.2f}$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;show_patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://paper-attachments.dropbox.com/s_8FAC27AC251845FE76C63F0EAF156DF8B3F4D3C17D70B16D9D9AEE81A162B247_1559630570606_turing_pattern.png"&gt;&lt;/p&gt;
&lt;h3&gt;感想&lt;/h3&gt;
&lt;p&gt;今回のお話は、システム生物学という分野で扱われがちなお話です。私が興味を持っているバイオインフォマティクスにシステム生物学が含まれるかどうかはわかりません。僕が所属する学科は、バイオインフォマティクスとシステム生物学という 2 つの学問分野を柱にしています。システム生物学もなかなか面白いなと思いました。今後こちらのブログも充実させていくので、是非チェックして見て下さい！
todo あとで追記&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="生物学"></category><category term="Bioinfo"></category></entry><entry><title>SSHのポートフォワード（トンネリング）とは？</title><link href="https://naoto-yamaguchi.github.io/site/ssh_port_forward.html" rel="alternate"></link><published>2019-03-31T00:00:00+09:00</published><updated>2019-03-31T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-03-31:/site/ssh_port_forward.html</id><summary type="html">&lt;p&gt;SSHポートフォーワードとは（未完）&lt;br&gt;&lt;img src="https://paper-attachments.dropbox.com/s_8FAC27AC251845FE76C63F0EAF156DF8B3F4D3C17D70B16D9D9AEE81A162B247_1559630562939_port_forwarding.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;動機&lt;/h3&gt;
&lt;p&gt;SSH ポートフォワードを使っていた時に、SCP でファイルを送信したかったため。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;サムネイル画像は&lt;a href="https://cookbook.fortinet.com/port-forwarding-60/"&gt;こちら&lt;/a&gt;より引用&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.clear-code.com/blog/2014/9/12.html"&gt;SSH ポートフォワード（トンネリング）を使って、遠隔地から LAN 内のコンピュータにログインする&lt;/a&gt;
&lt;a href="https://www.turbolinux.co.jp/products/server/11s/user_guide/x9016.html"&gt;Turbolinux 11 Server: ユーザーガイド 第 21 章 SSH（Secure SHell）サーバー&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;SSH ポートフォワードとは？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ある特定のコンピュータの特定のポート番号に対して送られる通信内容を、別のコンピュータの特定のポート番号への接続として転送すること。インターネットと LAN の間でルーターは日常的にこれをこなしているが、SSH のポートフォワード機能を使うと、様々な設定でポートフォワードをすることができる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今回は、ある LAN の中にある PC から別の LAN の中にある PC に SSH 接続しており、そのコンピュータ間でファイル転送をおこないたいというモチベーションがありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インターネット上の中継サーバを使う方法&lt;/li&gt;
&lt;li&gt;LAN 内の中継サーバを使う方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の 2 通りがあります。&lt;/p&gt;
&lt;h3&gt;実際にやってみた&lt;/h3&gt;
&lt;p&gt;すみません、まとめたら載せます。&lt;/p&gt;
&lt;!-- zsh: no matches found
[ss](http://d.hatena.ne.jp/eitya/20110707/1310023383)
[]https://shirusu-ni-tarazu.hatenablog.jp/entry/2013/01/18/034233
全然関係ないところでエラー

[](https://qiita.com/kyrya/items/121fc54ae4c9c10c0e8b)
を参考に
`scp -o 'ProxyCommand ssh aca10555ym@as.abci.ai nc %h %p' lstm_human_antigen.ipynb aca10555ym@es:/groups2/gca50068/yamaguchi`
やってみたけど、
sh_exchange_identification ってエラー
[](https://qiita.com/uutarou10/items/f8391965adc6b4c312d1)
そもそも IP アドレスが違う説確認する

tmux ってなに

abci-gate した状態で
[~] scp -r -P 10022 [送りたいディレクトリ][usrname]@localhost:[送り先のディレクトリ]
でできた --&gt;</content><category term="SSH"></category><category term="portforward"></category></entry><entry><title>私のおすすめのものたち</title><link href="https://naoto-yamaguchi.github.io/site/recommendation.html" rel="alternate"></link><published>2019-02-24T00:00:00+09:00</published><updated>2019-02-24T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-02-24:/site/recommendation.html</id><summary type="html">&lt;p&gt;おすすめ集、好きなもの&lt;/p&gt;</summary><content type="html">&lt;p&gt;e&lt;/p&gt;
&lt;h1&gt;動機、対象&lt;/h1&gt;
&lt;p&gt;人のおすすめを聞いて自分の興味の幅が広がったり、新たな発見をすることがあったので。
現状適当ですが、随時載せていきます。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;h1&gt;目次&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;おすすめの本&lt;ul&gt;
&lt;li&gt;サピエンス全史&lt;/li&gt;
&lt;li&gt;ホモデウス&lt;/li&gt;
&lt;li&gt;史上最強の哲学入門&lt;/li&gt;
&lt;li&gt;勉強の哲学&lt;/li&gt;
&lt;li&gt;愛するということ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;おすすめの英語&lt;ul&gt;
&lt;li&gt;イミテーションゲーム&lt;/li&gt;
&lt;li&gt;Begin Again&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;おすすめのドラマ&lt;ul&gt;
&lt;li&gt;glee&lt;/li&gt;
&lt;li&gt;the big bang theory&lt;/li&gt;
&lt;li&gt;逃げるは恥だが役に立つ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;おすすめの(MarkDown)エディタ&lt;ul&gt;
&lt;li&gt;Dropbox Paper&lt;/li&gt;
&lt;li&gt;VScode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;おすすめのSSG(静的サイトジェネレーター)&lt;ul&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;おすすめの国、街&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;おすすめのアプリ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nuzzle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;おすすめのサイト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Golden&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="好きなもの"></category><category term="嗜好"></category></entry><entry><title>NCBIからゲノムデータを取得する方法</title><link href="https://naoto-yamaguchi.github.io/site/how_to_get_genome_data_from_ncbi.html" rel="alternate"></link><published>2019-02-22T00:00:00+09:00</published><updated>2019-02-22T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-02-22:/site/how_to_get_genome_data_from_ncbi.html</id><summary type="html">&lt;p&gt;ゲノムデータ取得&lt;br&gt;&lt;img src="https://paper-attachments.dropbox.com/s_8FAC27AC251845FE76C63F0EAF156DF8B3F4D3C17D70B16D9D9AEE81A162B247_1559630593492_ncbi.png" width=150 height=150&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;動機&lt;/h3&gt;
&lt;p&gt;NCBI からゲノムデータを取ってきたい時どうすれば良いかわからなかった。ftp を知らなかったけど、ダウンロードできました！&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;サムネイル画像は&lt;a href="https://en.wikipedia.org/wiki/National_Center_for_Biotechnology_Information"&gt;こちら&lt;/a&gt;より引用&lt;/p&gt;
&lt;h3&gt;Step1: 取得したいデータの ftp パスを手に入れる&lt;/h3&gt;
&lt;p&gt;NCBI にどういうデータがどういう風に  あるかよくわかっていませんが、とりあえず自分がやった範囲では、ftp パスを用いて、圧縮された fna ファイルを  ダウンロードし、解凍しました。(解凍せずに中身を見ようとして、文字コードエラーが出たので注意！)
解凍せずに扱おうとしたところ、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UnicodeDecodeError: &amp;#39;utf-8&amp;#39; codec can&amp;#39;t decode byte 0x8b in position 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というエラーとお友達になれました。&lt;/p&gt;
&lt;p&gt;zip ファイルの解凍は、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gunzip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でできました。&lt;/p&gt;
&lt;p&gt;流れとしては、例えば、~/data/に GCF_000010525.1.fna.gz というファイル名でダウンロードする場合、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget -O ~/data/GCF_000010525.1.fna.gz ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/010/525/GCF_000010525.1_ASM1052v1/GCF_000010525.1_ASM1052v1_cds_from_genomic.fna.gz
$ gunzip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで GCF_000010525.1.fna ファイルを見たり読み込ませたりして解析に用いることができます！&lt;/p&gt;
&lt;p&gt;自分はこれしかやったことがないので、他にも試してみて、追記したいと思います。&lt;/p&gt;</content><category term="Bioinfo"></category><category term="生物情報"></category><category term="NCBI"></category></entry><entry><title>Jupyter Notebookをリモートサーバーで利用し、ローカルのブラウザで確認する"</title><link href="https://naoto-yamaguchi.github.io/site/remote_jupyternotebook.html" rel="alternate"></link><published>2019-02-20T00:00:00+09:00</published><updated>2019-02-20T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-02-20:/site/remote_jupyternotebook.html</id><summary type="html">&lt;p&gt;Jupyter Notebook利用の備忘録&lt;img src="https://paper-attachments.dropbox.com/s_8FAC27AC251845FE76C63F0EAF156DF8B3F4D3C17D70B16D9D9AEE81A162B247_1559630601567_jupyter.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;動機&lt;/h3&gt;
&lt;p&gt;データ分析で大量のデータを扱う際、ローカルの  コンピューターではなく  リモートサーバーにダウンロードなどを行うことがありました。そのデータを分析するために、Jupyter Notebook を利用したかったのですが、 ローカルで使えるだけではデータを参照できないので、データがおかれているリモートサーバーで  使えるようにする必要がありました。やりたいことは以下のような感じです。
http://starpentagon.net/analytics/remote_jupyter_notebook/&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;サムネイル画像は&lt;a href="https://en.wikipedia.org/wiki/Project_Jupyter"&gt;こちら&lt;/a&gt;より引用&lt;/p&gt;
&lt;h3&gt;Step1: リモートサーバーに Jupyter Notebook をインストール&lt;/h3&gt;
&lt;p&gt;リモートサーバーにおける権限などに注意する必要があります。おそらく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install jupyter --user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で十分ですが、自分は anaconda をインストールしました。このページの Linux でのインストール方法を参考にしました。
https://qiita.com/t2y/items/2a3eb58103e85d8064b6
https://stackoverflow.com/questions/38080407/how-can-i-install-the-latest-anaconda-with-wget&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh
$ bash Anaconda3-4.2.0-Linux-x86_64.sh
&lt;span class="c1"&gt;#PATHの設定&lt;/span&gt;
~/.bash_profileに
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/yamaguchi/anaconda3/bin:PATH
&lt;span class="c1"&gt;#を追記&lt;/span&gt;
$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step2: サーバー側の設定&lt;/h3&gt;
&lt;p&gt;基本的にこちらを参考にしました。
http://starpentagon.net/analytics/remote_jupyter_notebook/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;notebook.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# ここでパスワードを入力し、出力されたsha1値をコピー&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~/.jupyter/jupyter_notebook_config.py を変更。なければ、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jupyter notebook --generate-config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~/.jupyter/jupyter_notebook_config.py を開き&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.NotebookApp.ip = &amp;#39;*&amp;#39;
c.NotebookApp.open_browser = False
c.NotebookApp.port = 8888
c.NotebookApp.password = u&amp;#39;sha1:XXXXXXX&amp;#39; # 先ほど記録したsha1値を記載
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下のように設定。&lt;/p&gt;
&lt;p&gt;これにて設定終了。 自分の場合、一旦 ssh 接続を切って、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L 8888:localhost:8888 &amp;lt;username&amp;gt;@&amp;lt;ip address&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で再度リモートサーバーに接続し、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を実行し、起動。&lt;/p&gt;
&lt;p&gt;クライアント側のブラウザから、
&lt;code&gt;http://localhost:8888&lt;/code&gt;にアクセス。jupyter notebook ぽい画面が表示され、sha1 値  生成時に入力したパスワード入力すると、認証が成功し、クライアント側のブラウザからリモートサーバー上で動く Jupyter Notebook を利用できます。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;https://qiita.com/Miggy/items/5466a2c1e968602f3ebe&lt;/p&gt;</content><category term="Python SSh"></category></entry></feed>