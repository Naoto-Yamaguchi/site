<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nafoto'z_blog - Docker</title><link href="https://naoto-yamaguchi.github.io/site/" rel="alternate"></link><link href="https://naoto-yamaguchi.github.io/site/feeds/docker.atom.xml" rel="self"></link><id>https://naoto-yamaguchi.github.io/site/</id><updated>2019-06-05T00:00:00+09:00</updated><entry><title>Dockerでgdb環境構築</title><link href="https://naoto-yamaguchi.github.io/site/docker_gdbenv.html" rel="alternate"></link><published>2019-06-05T00:00:00+09:00</published><updated>2019-06-05T00:00:00+09:00</updated><author><name>Naoto Yamaguchi</name></author><id>tag:naoto-yamaguchi.github.io,2019-06-05:/site/docker_gdbenv.html</id><summary type="html">&lt;p&gt;Dockerでgdb環境を構築した備忘録&lt;br&gt;&lt;img src="https://paper-attachments.dropbox.com/s_8FAC27AC251845FE76C63F0EAF156DF8B3F4D3C17D70B16D9D9AEE81A162B247_1559697621860_docker.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;h1&gt;動機対象&lt;/h1&gt;
&lt;p&gt;学校の課題で、dえC++と機械語の命令を比較しながら、メモリアクセスを少なくし、実行クロック数の少ない命令で目的の計算をすることでという速いアルゴリズムを設計できるようになろう！というものがありました。そこで、gdbデバッガで、機械語リストを出力させるということをやったのですが、Mac OS Sierraでは、gdbコード署名用の証明書の作成が必要とのことで、面倒そうでした。そこで、DockerでCentOSコンテナを立てて、gdb環境を整えることで、その代わりとすることにしました！&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kurkuru/items/127fa99ef5b2f0288b81"&gt;DockerをMacOSにinstall&lt;/a&gt;
DockerでCentOSコンテナを立ち上げる&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/muniere/items/0569d05d470c5d3dc51b"&gt;CentOSにvimをインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://qiita.com/SOJO/items/9d6a65f3da941c49da36"&gt;こちら&lt;/a&gt;も参考になる&lt;/p&gt;
&lt;p&gt;この途中、&lt;code&gt;./configure&lt;/code&gt;のところで、
&lt;code&gt;configure: error: no acceptable C compiler found in $PATH&lt;/code&gt;
と出たが、これはgccがインストールされていなかったからだった。&lt;a href="https://qiita.com/tmak_tsukamoto/items/b1c1f04d2a2ac527887c"&gt;以下&lt;/a&gt;に記載の同様のエラーだったため、gccのインストールで解決&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.sioyaki.com/entry/2017/04/10/101610"&gt;g++をyumでインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gdb使ってみたら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) b main
Breakpoint 1 at 0x4007e8: file a.cpp, line 6.
(gdb) run
Starting program: /root/01/a.out
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000

Breakpoint 1, main () at a.cpp:6
6                cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; endl;
Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.212.el6_10.3.x86_64 libgcc-4.4.7-23.el6.x86_64 libstdc++-4.4.7-23.el6.x86_64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となったので、
&lt;a href="https://corgi-lab.com/linux/debug-with-gdb/"&gt;debuginfoのinstall&lt;/a&gt;
&lt;a href="https://stackoverflow.com/questions/10389988/missing-separate-debuginfos-use-debuginfo-install-glibc-2-12-1-47-el6-2-9-i686"&gt;こちら&lt;/a&gt;も、Missing separate debuginfosについて&lt;/p&gt;
&lt;h1&gt;目次&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;DockerでCentOSコンテナを立ち上げる&lt;/li&gt;
&lt;li&gt;CentOSにgdbをインストール&lt;/li&gt;
&lt;li&gt;CentOSにvimをインストール&lt;/li&gt;
&lt;li&gt;CentOSにg++, debuginfoをインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;DockerでCentOSコンテナを立ち上げる&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;centosイメージのダウンロード&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull centos
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;コンテナの起動&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --cap-add=SYS_PTRACE --security-opt=&amp;quot;seccomp=unconfined&amp;quot; --name gdb centos:centos6.9 /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-dオプションをつけてバックグラウンドで起動しないとうまくいかなかったので注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起動しているコンテナの確認&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker ps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;停止しているものも確認したい場合は&lt;code&gt;-a&lt;/code&gt;をつける&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker exec -it gdb /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でbashを起動し、中に入れる&lt;/p&gt;
&lt;h1&gt;CentOSにgdbをインストール&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;gdbのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install gdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでできた！と思って、ファイルを作ってデバッグしてみようと思ったらvimがインストールされてなかった。&lt;/p&gt;
&lt;h1&gt;CentOSにvimをインストール&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;vimをインストールするのに必要なパッケージが入っているかを以下のコマンドで確認。"list installed"はインストール済みのパッケージ一覧を表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep mercurial
$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep ncurses-devel
$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep make         
$ yum list installed &lt;span class="p"&gt;|&lt;/span&gt; grep gcc 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;インストールされていない場合はそれぞれインストール。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install mercurial
$ yum install ncurses-devel
$ yum install make
$ yum install gcc
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;vimのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/src
$ sudo hg clone https://bitbucket.org/vim-mirror/vim vim
$ &lt;span class="nb"&gt;cd&lt;/span&gt; vim
$ ./configure --with-features&lt;span class="o"&gt;=&lt;/span&gt;huge --enable-multibyte --disable-selinux
$ make
$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;必要があれば、&lt;a href="https://qiita.com/meio/items/08143eacd174ac0f7bd5"&gt;こちら&lt;/a&gt;を参考に、日本語文字化けしないように、&lt;code&gt;~/.vimrc&lt;/code&gt;の設定をしておきましょう。&lt;/p&gt;
&lt;h1&gt;CentOSにg++, debuginfoをインストール&lt;/h1&gt;
&lt;p&gt;これで、vimが使えるので、C++ファイルの作成をしました。コンパイルしようとしたところ、g++をインストールしていないことに気がついたので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install gcc-c++
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でインストールし、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ g++ -g a.cpp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-gオプションをつけて、gdbデバック用にコンパイル。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gdb ./a.out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で実行して、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ b main
$ run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;したところ、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    (gdb) b main
    Breakpoint 1 at 0x4007e8: file a.cpp, line 6.
    (gdb) run
    Starting program: /root/01/a.out
    warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000

    Breakpoint 1, main () at a.cpp:6
    6                cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; endl;
    Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.212.el6_10.3.x86_64 libgcc-4.4.7-23.el6.x86_64 libstdc++-4.4.7-23.el6.x86_64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となったので、
debuginfoをインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install yum-utils
$ debuginfo-installglibc-2.12-1.212.el6_10.3.x86_64 libgcc-4.4.7-23.el6.x86_64 libstdc++-4.4.7-23.el6.x86_64 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで、gdbでデバッグできるようになりました！
参考にさせていただいた記事、ありがとうございます。&lt;/p&gt;
&lt;h1&gt;Dockerコンテナをcommitしてみる&lt;/h1&gt;
&lt;p&gt;gdbという名前のコンテナで動かしていたものを、gdbenvというイメージとして保存します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker commit gdb gdbenv
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
gdbenv              latest              c7e81afda91c        &lt;span class="m"&gt;22&lt;/span&gt; seconds ago      &lt;span class="m"&gt;1&lt;/span&gt;.34GB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で、&lt;code&gt;gdbenv&lt;/code&gt;という名前のイメージができていることを確認。
今後ここからイメージを起動して使うことができます。
Docker Hubにimageを公開すれば他の人も利用可能になります。公開にはDockerのアカウントを作成する必要があるみたいです。&lt;/p&gt;
&lt;h1&gt;commitしたimageからコンテナを利用→エラー&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;commitしたgdbenvというイメージから、gdbenvという名前のコンテナを起動して、bashを動かした。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --name gdbenv -it -d gdbenv /bin/bash
$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it gdbenv /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでgdbででバックしようとしたら、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb) b main
Breakpoint 1 at 0x4007e8: file a.cpp, line 6.
(gdb) run
Starting program: /root/01/a.out
warning: Error disabling address space randomization: Operation not permitted
1
2
During startup program exited normally.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となったので、調べてみると、
gdbはシステムコールを使ってデバッグしているので、Dockerのコンテナを起動する際に、
* --cap-add=SYS_PTRACE: コンテナ内からのgdbによるptrace(2)を許可
* --security-opt="seccomp=unconfined": コンテナ内からのシステムコールの発行に制限を掛けない
の2つのオプションを追加する必要があるようです。（初めのCentOSのイメージからコンテナ起動するときに使ったコマンドと同じ。てっきり忘れていました。
&lt;a href="https://www.cyamax.com/entry/2018/02/09/070000"&gt;こちら&lt;/a&gt;を参考にさせていただきました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --cap-add&lt;span class="o"&gt;=&lt;/span&gt;SYS_PTRACE --security-opt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;seccomp=unconfined&amp;quot;&lt;/span&gt; --name gdbenv -it -d gdbenv /bin/bash
$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it gdbenv /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このようすることで、うまくできました。&lt;/p&gt;
&lt;h1&gt;このimagesをDocker Hubにpushする&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://qiita.com/umi/items/d4b5a68263ad0444693b"&gt;これ&lt;/a&gt;を参考に
&lt;a href="https://hub.docker.com/explore/"&gt;Docker Hub&lt;/a&gt;にアカウント登録して、
そのアカウントで、ターミナルからログイン&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker login
Username: nyamaguchi
Password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pushしたいイメージに、&lt;code&gt;docker tag&lt;/code&gt; コマンドで&lt;code&gt;&amp;lt;アカウント名&amp;gt;&amp;lt;リポジトリ名&amp;gt;:&amp;lt;タグ名&amp;gt;&lt;/code&gt; というタグを付加。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images                                                                          &lt;span class="m"&gt;13&lt;/span&gt;:34:35
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
gdbenv              latest              c7e81afda91c        &lt;span class="m"&gt;27&lt;/span&gt; hours ago        &lt;span class="m"&gt;1&lt;/span&gt;.34GB
$ docker tag c7e81afda91c nyamaguchi/gdbenv:latest
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
gdbenv              latest              c7e81afda91c        &lt;span class="m"&gt;27&lt;/span&gt; hours ago        &lt;span class="m"&gt;1&lt;/span&gt;.34GB
nyamaguchi/gdbenv   latest              c7e81afda91c        &lt;span class="m"&gt;27&lt;/span&gt; hours ago        &lt;span class="m"&gt;1&lt;/span&gt;.34GB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これをリモートリポジトリへとpush&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker push nyamaguchi/gdbenv:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Docker Hubからpullする&lt;/h1&gt;
&lt;p&gt;centosにgdb, vim, g++をinstallしたこのイメージを私がDocker Hubのパブリックリポジトリにpushしたので、&lt;code&gt;docker pull&lt;/code&gt;で自分のローカル環境に持ってくることができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull nyamaguchi/gdbenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でこのimageでも利用可能になります。
ほぼ使い道ないかもしれませんが、もしよかったら使ってみてください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker search gdbenv&lt;/code&gt;で検索できるはずですが、なぜか見つかりませんでした。&lt;/p&gt;
&lt;h1&gt;C++の標準ライブラリのdebugのための環境構築&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://doss.eidos.ic.i.u-tokyo.ac.jp/html/gdb_step_into_libraries.html"&gt;やり方&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;https://superuser.com/questions/159310/bash-line-7-dpkg-command-not-found-said-centos&lt;/p&gt;
&lt;p&gt;These steps worked for me on CentOS 7:&lt;/p&gt;
&lt;p&gt;Install epel using the following command: sudo yum -y install epel-release
Refresh repo by typing the following commad: sudo yum repolist
Install the dpkg rpm packages: sudo yum install dpkg-devel dpkg-dev
For more information: http://www.cyberciti.biz/faq/installing-rhel-epel-repo-on-centos-redhat-7-x/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;実行ファイルを実行した時に使うであろう、ファイルを表示
$ ldd 04

あるファイルを提供しているパッケージ名を表示
$ dpkg -S /lib/x86_64-linux-gnu/libc.so.6
やったけど、
dpkg-query: no path found matching pattern

見つからないのは、そのパッケージ自体がインストールされていないのが原因か。
え、じゃあcのファイルはどうしてる？
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ヘッダーファイルは、&lt;code&gt;.user/include/stdio.h&lt;/code&gt;から見られる。
https://qiita.com/DQNEO/items/4e5c2eca2761ec08b922&lt;/p&gt;
&lt;p&gt;ヘッダーファイルの実態は、glibにある
https://qiita.com/kure/items/d88b5b81efe38ead0ea2&lt;/p&gt;</content><category term="Docker"></category><category term="Programming"></category></entry></feed>